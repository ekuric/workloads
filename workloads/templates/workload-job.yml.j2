apiVersion: batch/v1
kind: Job
metadata:
  name: scale-ci-{{workload_job}}
  labels:
    name: scale-ci-workload
spec:
  parallelism: 1
  completions: 1
  backoffLimit: 0
  template:
    metadata:
      name: scale-ci-workload
    spec:
      restartPolicy: Never
{% if workload_job == "nodevertical" %}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nodevertical
                operator: DoesNotExist
{% endif %}
{% if workload_job == "pvcscale" %}
      serviceAccountName: useroot
{% endif %}
{% if workload_job_privileged %}
      serviceAccountName: useroot
      hostNetwork: true
{% endif %}
      containers:
      - name: scale-ci-workload
        image: "{{workload_image}}"
        imagePullPolicy: Always
        securityContext:
          privileged: {{workload_job_privileged}}
        command:
        - /root/workload/run.sh
        volumeMounts:
        - name: workload-script
          mountPath: /root/workload/
        - name: kubeconfig
          mountPath: /root/.kube
        - name: pbench-config
          mountPath: /opt/pbench-agent/config/
        - name: pbench-ssh
          mountPath: /root/.ssh/authorized_keys
          subPath: authorized_keys
        - name: pbench-ssh
          mountPath: /root/.ssh/id_rsa
          subPath: id_rsa
        - name: pbench-ssh
          mountPath: /root/.ssh/id_rsa.pub
          subPath: id_rsa.pub
        - name: pbench-ssh
          mountPath: /.ssh/authorized_keys
          subPath: authorized_keys
        - name: pbench-ssh
          mountPath: /.ssh/id_rsa
          subPath: id_rsa
        - name: pbench-ssh
          mountPath: /.ssh/id_rsa.pub
          subPath: id_rsa.pub
        - name: unprivileged-ssh
          mountPath: /.ssh
        - name: pbench-ssh
          mountPath: /opt/pbench-agent/id_rsa
          subPath: id_rsa
        - name: pbench-results
          mountPath: /var/lib/pbench-agent

{% if enable_pbench_agents %}
        - name: ocp-volumes
          mountPath: /var/lib/kubelet/pods
        - name: proc-mount
          mountPath: /proc_host
{% endif %}
        env:
        - name: OCP_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: OCP_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
{% if enable_pbench_agents %}
        - name: ENABLE_PBENCH_AGENTS
          value: "true"
{% endif %}
{% if enable_pbench_agents %}
        ports:
        - containerPort: 2022
{% endif %}
{% if workload_job == "http" %}
        envFrom:
        - configMapRef:
            name: scale-ci-workload-http-env
{% elif workload_job == "network" or workload_job == "scale" or workload_job == "storage-fio" %}
        envFrom:
        - configMapRef:
            name: scale-ci-workload-{{workload_job}}-env
{% endif %}
      volumes:
      - name: workload-script
        configMap:
          name: scale-ci-workload-script
          defaultMode: 0744
      - name: kubeconfig
        secret:
          secretName: kubeconfig
      - name: pbench-config
        configMap:
          name: scale-ci-pbench-config
      - name: pbench-ssh
        secret:
          secretName: pbench-ssh
          defaultMode: 0600
      - name: unprivileged-ssh
        emptyDir: {}
{% if enable_pbench_agents %}
      - name: pbench-results
        hostPath:
          path: /var/lib/pbench-agent
      - name: ocp-volumes
        hostPath:
          path: /var/lib/kubelet/pods
      - name: proc-mount
        hostPath:
          path: /proc
{% else %}
      - name: pbench-results
        emptyDir: {}
{% endif %}
{% if workload_job_node_selector %}
      nodeSelector:
        node-role.kubernetes.io/workload: ""
{% endif %}
{% if workload_job_taint %}
      tolerations:
      - key: "role"
        value: "workload"
        operator: "Equal"
        effect: "NoSchedule"
{% endif %}
